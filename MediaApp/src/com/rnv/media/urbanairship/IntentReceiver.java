package com.rnv.media.urbanairship;

import java.util.Arrays;
import java.util.List;
import java.util.Set;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

import com.rnv.media.util.Constants;
import com.urbanairship.UAirship;
import com.urbanairship.push.PushManager;

public class IntentReceiver extends com.urbanairship.push.GCMPushReceiver {

	private static final String logTag = "VUE-PUSH";
	private String USERID;
	private String USER_TYPE;
	@Override
	public void onReceive(Context context, Intent intent) {
		MCLog.i(logTag, "Received intent: " + intent.toString());
System.out.println("TEST push there.........");
		String action = intent.getAction();/*gets the action which has come through BroadCastReceiver*/

		if (action.equals(PushManager.ACTION_PUSH_RECEIVED)) {
			/**This condition will be called when a push is received.*/

			int id = intent.getIntExtra(PushManager.EXTRA_NOTIFICATION_ID, 0);/* pushId Unique push message Id generated by the Urban Airship*/

			MCLog.i(logTag, "Received push notification. Alert: "
					+ intent.getStringExtra(PushManager.EXTRA_ALERT)
					+ " [NotificationID="+id+"]");

			logPushExtras(intent);
		} else if (action.equals(PushManager.ACTION_NOTIFICATION_OPENED)) {
			/**This condition will be called when a push is opened from notification area.*/
			MCLog.i(logTag, "User clicked notification. Message: " + intent.getStringExtra(PushManager.EXTRA_ALERT));

			logPushExtras(intent);

			//launch alert on notification click
			Intent launch = new Intent(Intent.ACTION_MAIN);
			launch.putExtra("alertData", intent);
			launch.setClass(UAirship.shared().getApplicationContext(), AlertActivity.class);
			launch.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			UAirship.shared().getApplicationContext().startActivity(launch);

		} else if (action.equals(PushManager.ACTION_REGISTRATION_FINISHED)) {
			/**This condition will be called once the registration with Urban Airship is completed.*/
			MCLog.i(logTag, "Registration complete. APID:" + intent.getStringExtra(PushManager.EXTRA_APID)
					+ ". Valid: " + intent.getBooleanExtra(PushManager.EXTRA_REGISTRATION_VALID, false));


			Constants.DEVICETOKEN = intent.getStringExtra(PushManager.EXTRA_APID);
			// Util.saveStringInSP((Activity)context, com.simplikate.taxiplanet.projectConfigs.Constants.EXTRA_APP_ID, com.simplikate.taxiplanet.projectConfigs.Constants.DEVICETOKEN);
			//registerPushNotificationToken(intent.getStringExtra(PushManager.EXTRA_GCM_REGISTRATION_ID), false, intent.getStringExtra(PushManager.EXTRA_APID), context);
			//TODO: register web-service
		}/* else if (action.equals(PushManager.ACTION_GCM_DELETED_MESSAGES)) {
        	MCLog.i(logTag, "The GCM service deleted "+intent.getStringExtra(PushManager.EXTRA_GCM_TOTAL_DELETED)+" messages.");

        }*/
	}

	/**
	 * Log the values sent in the payload's "extra" dictionary.
	 * 
	 * @param intent A PushManager.ACTION_NOTIFICATION_OPENED or ACTION_PUSH_RECEIVED intent.
	 */
	private String logPushExtras(Intent intent) {
		StringBuilder data= new StringBuilder();
		data.append("-----------------ALL PUSH EXTRAS: START----------------"+"\n");
		Set<String> keys = intent.getExtras().keySet();
		for (String key : keys) {

			//ignore standard C2DM extra keys
			List<String> ignoredKeys = (List<String>)Arrays.asList(
					"collapse_key",//c2dm collapse key
					"from",//c2dm sender
					PushManager.EXTRA_NOTIFICATION_ID,//int id of generated notification (ACTION_PUSH_RECEIVED only)
					PushManager.EXTRA_PUSH_ID,//internal UA push id
					PushManager.EXTRA_ALERT);//ignore alert
			/* if (ignoredKeys.contains(key)) {
                continue;
            }*/
			MCLog.i(logTag, "Push Notification Extra: ["+key+" : " + intent.getStringExtra(key) + "]");
			data.append(key+" : "+intent.getStringExtra(key)+"\n");
		}
		data.append("-----------------ALL PUSH EXTRAS: END----------------"+"\n");
		return data.toString();
	}



}
